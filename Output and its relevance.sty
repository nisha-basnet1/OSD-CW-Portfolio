 

INTERNATIONAL BUSINESS ACADEMY
Open-Source Development
Course-Top-up Bachelor of Informatics

CW1 – Portfolio


Submitted to:
Niels Müller Larsen
Submitted By:
Nisha Basnet
Total Word Count: 1545

Contents
1. Open-Source Development and Its Relevance
1.1 Introduction
2. Identifying and Resolving Critical Errors
2.1 The Unmatched Parenthesis Bug
2.2 Additional Improvements
2.3 Problem Solving Process
3. Key Lesson Learned
3.1 The Value of Peer Review
3.2 Importance of Attention to Detail
3.3 Iterative Improvement Process
4. Conclusion

1. Open-Source Development and Its Relevance
1.1 Introduction
Open-source development is a way of creating software where the code is shared publicly, and anyone can see, use, or improve it.
Instead of keeping the code private, developers make it open so others can learn from it, fix problems, or add new features. This
kind of development encourages teamwork and sharing because people from around the world can work together on the same project.
Open source helps students and new developers learn how real projects work and gives them a chance to contribute, even if they’re
just starting out.
Open-source development has transformed modern software engineering through collaboration and open sharing of
code. As a student, I’ve seen how this method supports learning and improves the quality of projects. While working on a Yatzy dice
game in Python, I experienced how feedback, and reviewing code can make a big difference. Even though the project was simple, it
taught me important lessons about coding and problem-solving. During the development process, I faced a few challenges that affected
how the game worked, especially in the category selection system. A major syntax error even stopped the game from running at one point.
Luckily, my friend Rabindra reviewed my code and helped me find and fix that issue. His feedback didn’t just solve the immediate problem
it also helped me understand how to look at my code from another person’s perspective. , I made improvements that made the game
smoother and more reliable
This experience showed me the true value of open-source principles like collaboration, code review, and
continuous improvement. Working with someone else allowed me to learn faster and write better code. I realized that programming is not
just about getting something to work, but about writing clean, clear code that others can understand and build upon. Being open to
feedback and making changes based on it helped me grow as a developer.
Through this project, I learned that open-source development
is not only about sharing code it's about sharing ideas, learning from others, and growing together. Open-source development is relevant
to me because it offers a great way to learn and grow in the field of technology. By exploring open-source projects, we can see how
real-world software is built, which helps them understand coding practices better. This  also practices by fixing bugs, adding features,
or improving documentation. This hands-on experience improves skills and builds confidence. Contributing to open-source projects also
allows me  to collaborate with other developers around the world, improving teamwork and communication skills. It can even help them
build a strong portfolio and gain recognition, which is useful when applying for internships or jobs. Overall, open source gives a
valuable opportunity to learn, contribute, and connect with the global developer community.

2. Identifying and Resolving Critical Errors
2.1 The Unmatched Parenthesis Bug
One of the most serious errors in my Yatzy game was found by my friend Rabindra in the “show_available_categories method”. 
This part of the code was meant to list all the scoring options, like “Three of a Kind” or “Full House.” However, the program
crashed every time because of a missing opening parenthesis in a list comprehension. Even though I had looked over the code
several times, I completely missed this small but important mistake. This bug was a big problem because it stopped the game from
starting at all. It wasn’t easy to spot since the error was hidden in a line that looked mostly correct. Without Rabindra’s help
and perspective, I might have spent hours looking in the wrong place for the issue and I found the exact spot where it crashed.
To fix the problem, I corrected the parentheses in the list comprehension while keeping the original logic that filters out private
methods and selects only scoring functions. Once I fixed the syntax, I tested the method with all categories to make sure everything
worked. This experience taught me how a small syntax error can cause major issues and how important it is to have others review your
code Rabindra’s help not only saved time but also showed me the power of collaboration in programming.

2.2 Additional Improvements
Beyond the critical syntax error, Rabindra's review identified several other areas for improvement such as Scoring accuracy - The
original implementation contained calculation errors in certain scoring categories Test coverage gaps - Many edge cases weren't
properly tested.

2.3 Problem Solving Process
The process for improving the show_available_categories method followed a clear and systematic approach. First, I isolated the
specific section of code that was causing problems, allowing them to focus on the source of the issue. Then, they carefully
analyzed the structure of the list comprehension used in the method to understand how it was filtering categories. Each part of the
filtering logic was examined to ensure it functioned as intended. This process not only resolved the syntax error but also improved
the overall strength and robustness of the category selection system.

3. Key Lesson Learned
3.1 The Value of Peer Review
Working on this project taught me some big lessons about coding and teamwork. First, having someone else check your work is super
helpful. My friend Rabindra found mistakes I didn't see, like that time I forgot a simple bracket that made the whole game crash.
It showed me that everyone misses things sometimes, and that's why working together makes better code. Second, small mistakes can
cause big problems. That missing bracket seemed tiny, but it stopped the game from even starting. Now I'm more careful about:
1.	Double-checking my code.
2.	Testing everything.
3.	Fixing bugs step by step.
Most importantly, I learned that good coding isn't about being perfect it's about being open to help, willing to fix mistakes, and
keeping things simple so others can understand your work. These lessons changed how I write code now I take more time, ask for feedback
early, and don't get frustrated when things break.

3.2 Importance of Attention to Detail
When I was making the game, I learned something important thatsmall mistakes can cause big problems. The code was not running. After 
looking carefully and taking the feedback of Rabindra, I found the issue - I had forgotten to put one small bracket in the code. Just
this one missing character made the problem. This taught me three important things about writing good code i.e Check the code carefully.
Just like we check your answers before handing in a test, we need to read our code slowly to catch small mistakes. It's easy to miss
things when you're working fast. Test everything properly and fix the problems step by step. Like when something goes wrong not just
change things randomly but look very carefully, paying attention to find exactly where and what is the mistake.

3.3 Iterative Improvement Process
The development process showed that it gets better when it is improved step by step. With each round of feedback, I was able to find
and fix more problems. Every suggestion or issue pointed out helped make the code clean and the gameplay more user-friendly. Instead 
of stopping after completing my code, I get reviews from my friend and then I checked, tested, for the improvement. As a result, the
at last of the game was more polished and worked. This process shows how taking time to review and update code can really improve the
quality. The iterative improvement process showed how this improves the code through continuous refinement. Each round of feedback and
revision resulted in a more effective and reliable implementation.

4. Conclusion
The development of the Yatzy game has been a meaningful learning experience that highlighted the importance of open-source principles
such as collaboration, peer review, and continuous improvement. In open-source development, creating a Yatzy game serves as an excellent
learning project because it involves multiple programming concepts like logic building, user interaction, and scoring systems while 
being simple enough for beginners. Working on this game collaboratively allowed us to practice essential open source skills like giving
and receiving feedback, debugging each other’s code, and improving the overall project.
Throughout this project, I gained valuable experience in identifying problems, resolving bugs, and improving code structure. Rabindra’s
input was important that his review helped me fix a syntax error in the category selection system and improve the game's scoring accuracy.
This process taught me how important it is to view my work from another person’s perspective and how peer collaboration enhances both
earning and software quality.
Overall, the Yatzy game project helped me grow. It showed me that programming isn't just about making code work, it's about writing
clean, understandable code that others can use and improve. Open-source development has given me the confidence to collaborate,
contribute, and learn continuously in a supportive, global community.

Github Link: https://github.com/nisha-basnet1/OSD-CW-Portfolio
